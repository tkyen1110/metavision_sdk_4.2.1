/**********************************************************************************************************************
 * Copyright (c) Prophesee S.A. - All Rights Reserved                                                                 *
 *                                                                                                                    *
 * Subject to Prophesee Metavision Licensing Terms and Conditions ("License T&C's").                                  *
 * You may not use this file except in compliance with these License T&C's.                                           *
 * A copy of these License T&C's is located in the "licensing" folder accompanying this file.                         *
 **********************************************************************************************************************/

#ifndef METAVISION_SDK_CV_MODEL_3D_DETECTION_ALGORITHM_H
#define METAVISION_SDK_CV_MODEL_3D_DETECTION_ALGORITHM_H

#include <functional>
#include <set>
#include <Eigen/Core>

#include "metavision/sdk/cv/utils/gauss_newton_solver.h"
#include "metavision/sdk/cv/utils/plane_fitting_flow_estimator.h"
#include "metavision/sdk/cv3d/utils/edge_data_association.h"
#include "metavision/sdk/cv3d/utils/edge_ls_problem.h"

namespace Metavision {

template<typename T>
class MostRecentTimestampBufferT;
using MostRecentTimestampBuffer = MostRecentTimestampBufferT<timestamp>;

template<typename T>
class CameraGeometryBase;
using CameraGeometry32f = CameraGeometryBase<float>;

struct Model3d;

/// @brief Algorithm that detects a known 3D model by detecting its edges in an events stream
///
/// Support points are sampled along the 3D model's visible edges and tracked in a time surface in which the events
/// stream has been accumulated. Matches are looked for in the time surface by looking for timestamps on slopes that
/// have been generated by moving edges having the same orientations as the 3D model's ones.
/// An edge is considered matched when a line can be fitted from its matches. When enough edges are matched, the 3D
/// model's pose is estimated by minimizing the orthogonal distance between the matches and their corresponding
/// reprojected edge.
class Model3dDetectionAlgorithm {
public:
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW

    /// @brief Parameters used by the model 3d detection algorithm
    struct Parameters {
        Parameters(){}; // We have to define a default constructor like this because of a bug in GCC & clang

        std::uint32_t support_point_step_ = 10; ///< Distance, in pixels in the distorted image, between two support
                                                /// points
        std::uint32_t search_radius_ = 10;      ///< Radius in which matches are looked for for each support point
        std::uint32_t flow_radius_   = 3;       ///< Radius used to estimate the normal flow which gives the edge's
                                                /// orientation
        std::uint32_t n_fitting_pts_ = 3;       ///< Minimum required number of matches for line fitting
        float variance_threshold_    = 2e-5f; ///< Variance of the support points around the fitted line below which an
                                              /// edge is considered matched
        float fitted_edges_ratio_ = 0.5f;     ///< Matched edges to visible edges ratio above which a pose estimation is
                                              /// attempted
    };

    /// @brief Constructor
    /// @param cam_geometry Camera geometry instance allowing mapping coordinates from camera to image (and vice versa)
    /// @param model 3D model to detect
    /// @param time_surface Time surface instance in which the events stream is accumulated
    /// @param params Algorithm's parameters
    Model3dDetectionAlgorithm(const CameraGeometry32f &cam_geometry, const Model3d &model,
                              MostRecentTimestampBuffer &time_surface, const Parameters &params = Parameters());

    /// @brief Sets the camera's pose from which the algorithm will try to detect the 3D model
    /// @param T_c_w Camera's initialization pose
    void set_init_pose(const Eigen::Matrix4f &T_c_w);

    /// @brief Tries to detect the 3D model from the input events buffer
    /// @tparam InputIt Read-Only input event iterator type.
    /// @param[in] it_begin Iterator to the first input event
    /// @param[in] it_end Iterator to the past-the-end event
    /// @param[out] T_c_w Camera's pose if the detection has succeeded
    /// @param[out] visible_edges If filled, contains the model's edges visible from the initialization pose
    /// @param[out] detected_edges If filled, contains the model's successfully detected edges
    /// @return True if the detection has succeeded, false otherwise
    /// @note The estimated pose might be not very accurate but accurate enough to initiate a tracking phase
    template<typename InputIt>
    bool process_events(InputIt it_begin, InputIt it_end, Eigen::Matrix4f &T_c_w,
                        std::set<size_t> *visible_edges = nullptr, std::set<size_t> *detected_edges = nullptr);

private:
    bool process_internal(std::set<size_t> *visible_edges, std::set<size_t> *detected_edges);

    using GNReport = GaussNewton::Report<float>;

    const CameraGeometry32f &cam_geometry_;
    const Model3d &model_3d_;
    MostRecentTimestampBuffer &time_surface_;
    const Parameters params_;
    std::unique_ptr<PlaneFittingFlowEstimator> flow_estimator_;
    Eigen::Matrix4f T_c_w_;
    std::set<size_t> visible_edges_;
    std::set<size_t> detected_edges_;
    EdgeDataAssociationVector edge_data_associations_;
    EdgeDataAssociationVector filtered_data_associations_;
    std::vector<cv::Matx21f> match_candidates_;
    EdgeLSProblem edge_ls_problem_;
    GNReport gn_report_;
    Eigen::JacobiSVD<Eigen::Matrix2f> svd_solver_;
};
} // namespace Metavision

#include "metavision/sdk/cv3d/algorithms/detail/model_3d_detection_algorithm_impl.h"

#endif // METAVISION_SDK_CV_MODEL_3D_DETECTION_ALGORITHM_H
