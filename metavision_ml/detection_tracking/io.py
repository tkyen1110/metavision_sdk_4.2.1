# Copyright (c) Prophesee S.A. - All Rights Reserved
#
# Subject to Prophesee Metavision Licensing Terms and Conditions ("License T&C's").
# You may not use this file except in compliance with these License T&C's.
# A copy of these License T&C's is located in the "licensing" folder accompanying this file.

"""
Detection Loader which reads boxes from a CSV file generated by the C++ detection and tracking pipeline
"""
import os
import numpy as np

from metavision_sdk_core import EventBbox


def detections_csv_loader(detections_filename):
    """
    This function reloads a text file produced by the c++ detection and tracking pipeline
    and converts it into a dictionary of numpy structured arrays of EventBbox

    Args:
        detections_filename (str): Filename of detections in the same format as the
                                   C++ detection and tracking pipeline

    It returns a python dict where the keys are the timestamps. For each timestamp, the
    associated value is a numpy array of EventBbox for that particular timestamp

    Examples:
        >>> dic_ts_boxes = detections_csv_loader("detections.txt")
        >>> np_array_of_all_boxes_detected_at_timestamp_1000 = dic_ts_boxes[1000]
    """
    assert os.path.isfile(detections_filename)
    dic_ts_detections = {}
    with open(detections_filename, "r") as file:
        for line in file:
            line = line.strip()
            if line == "":
                continue
            assert len(line.split()) == 8
            ts = int(line.split()[0])
            if ts not in dic_ts_detections:
                dic_ts_detections[ts] = {"class_id": [], "track_id": [],
                                         "x": [], "y": [], "w": [], "h": [],
                                         "class_confidence": []}
            class_id, track_id = [int(i) for i in line.split()[1:3]]
            x, y, w, h, confidence = [float(i) for i in line.split()[3:]]
            dic_ts_detections[ts]["class_id"].append(class_id)
            dic_ts_detections[ts]["track_id"].append(track_id)
            dic_ts_detections[ts]["x"].append(x)
            dic_ts_detections[ts]["y"].append(y)
            dic_ts_detections[ts]["w"].append(w)
            dic_ts_detections[ts]["h"].append(h)
            dic_ts_detections[ts]["class_confidence"].append(confidence)

    dic_ts_eventbbox = {}
    for ts in dic_ts_detections:
        nb_boxes = len(dic_ts_detections[ts]["x"])
        event_bbox = np.zeros(
            nb_boxes, dtype=EventBbox)
        event_bbox["t"] = ts
        event_bbox["class_id"] = dic_ts_detections[ts]["class_id"]
        event_bbox["track_id"] = dic_ts_detections[ts]["track_id"]
        event_bbox["x"] = dic_ts_detections[ts]["x"]
        event_bbox["y"] = dic_ts_detections[ts]["y"]
        event_bbox["w"] = dic_ts_detections[ts]["w"]
        event_bbox["h"] = dic_ts_detections[ts]["h"]
        event_bbox["class_confidence"] = dic_ts_detections[ts]["class_confidence"]
        dic_ts_eventbbox[ts] = event_bbox
    return dic_ts_eventbbox
